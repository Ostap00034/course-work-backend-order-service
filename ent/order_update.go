// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/course-work-backend-order-service/ent/order"
	"github.com/Ostap00034/course-work-backend-order-service/ent/predicate"
	"github.com/google/uuid"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetTitle sets the "title" field.
func (ou *OrderUpdate) SetTitle(s string) *OrderUpdate {
	ou.mutation.SetTitle(s)
	return ou
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTitle(s *string) *OrderUpdate {
	if s != nil {
		ou.SetTitle(*s)
	}
	return ou
}

// SetDescription sets the "description" field.
func (ou *OrderUpdate) SetDescription(s string) *OrderUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDescription(s *string) *OrderUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// SetPrice sets the "price" field.
func (ou *OrderUpdate) SetPrice(f float32) *OrderUpdate {
	ou.mutation.ResetPrice()
	ou.mutation.SetPrice(f)
	return ou
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePrice(f *float32) *OrderUpdate {
	if f != nil {
		ou.SetPrice(*f)
	}
	return ou
}

// AddPrice adds f to the "price" field.
func (ou *OrderUpdate) AddPrice(f float32) *OrderUpdate {
	ou.mutation.AddPrice(f)
	return ou
}

// SetAddress sets the "address" field.
func (ou *OrderUpdate) SetAddress(s string) *OrderUpdate {
	ou.mutation.SetAddress(s)
	return ou
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetAddress(*s)
	}
	return ou
}

// SetLongitude sets the "longitude" field.
func (ou *OrderUpdate) SetLongitude(s string) *OrderUpdate {
	ou.mutation.SetLongitude(s)
	return ou
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableLongitude(s *string) *OrderUpdate {
	if s != nil {
		ou.SetLongitude(*s)
	}
	return ou
}

// SetLatitude sets the "latitude" field.
func (ou *OrderUpdate) SetLatitude(s string) *OrderUpdate {
	ou.mutation.SetLatitude(s)
	return ou
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableLatitude(s *string) *OrderUpdate {
	if s != nil {
		ou.SetLatitude(*s)
	}
	return ou
}

// SetCategoryID sets the "category_id" field.
func (ou *OrderUpdate) SetCategoryID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetCategoryID(u)
	return ou
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCategoryID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetCategoryID(*u)
	}
	return ou
}

// SetClientID sets the "client_id" field.
func (ou *OrderUpdate) SetClientID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetClientID(u)
	return ou
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableClientID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetClientID(*u)
	}
	return ou
}

// SetMasterID sets the "master_id" field.
func (ou *OrderUpdate) SetMasterID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetMasterID(u)
	return ou
}

// SetNillableMasterID sets the "master_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMasterID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetMasterID(*u)
	}
	return ou
}

// ClearMasterID clears the value of the "master_id" field.
func (ou *OrderUpdate) ClearMasterID() *OrderUpdate {
	ou.mutation.ClearMasterID()
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Title(); ok {
		if err := order.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Order.title": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Description(); ok {
		if err := order.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Order.description": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Address(); ok {
		if err := order.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Order.address": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Longitude(); ok {
		if err := order.LongitudeValidator(v); err != nil {
			return &ValidationError{Name: "longitude", err: fmt.Errorf(`ent: validator failed for field "Order.longitude": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Latitude(); ok {
		if err := order.LatitudeValidator(v); err != nil {
			return &ValidationError{Name: "latitude", err: fmt.Errorf(`ent: validator failed for field "Order.latitude": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Title(); ok {
		_spec.SetField(order.FieldTitle, field.TypeString, value)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(order.FieldDescription, field.TypeString, value)
	}
	if value, ok := ou.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ou.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ou.mutation.Address(); ok {
		_spec.SetField(order.FieldAddress, field.TypeString, value)
	}
	if value, ok := ou.mutation.Longitude(); ok {
		_spec.SetField(order.FieldLongitude, field.TypeString, value)
	}
	if value, ok := ou.mutation.Latitude(); ok {
		_spec.SetField(order.FieldLatitude, field.TypeString, value)
	}
	if value, ok := ou.mutation.CategoryID(); ok {
		_spec.SetField(order.FieldCategoryID, field.TypeUUID, value)
	}
	if value, ok := ou.mutation.ClientID(); ok {
		_spec.SetField(order.FieldClientID, field.TypeUUID, value)
	}
	if value, ok := ou.mutation.MasterID(); ok {
		_spec.SetField(order.FieldMasterID, field.TypeUUID, value)
	}
	if ou.mutation.MasterIDCleared() {
		_spec.ClearField(order.FieldMasterID, field.TypeUUID)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetTitle sets the "title" field.
func (ouo *OrderUpdateOne) SetTitle(s string) *OrderUpdateOne {
	ouo.mutation.SetTitle(s)
	return ouo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTitle(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetTitle(*s)
	}
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *OrderUpdateOne) SetDescription(s string) *OrderUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDescription(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// SetPrice sets the "price" field.
func (ouo *OrderUpdateOne) SetPrice(f float32) *OrderUpdateOne {
	ouo.mutation.ResetPrice()
	ouo.mutation.SetPrice(f)
	return ouo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePrice(f *float32) *OrderUpdateOne {
	if f != nil {
		ouo.SetPrice(*f)
	}
	return ouo
}

// AddPrice adds f to the "price" field.
func (ouo *OrderUpdateOne) AddPrice(f float32) *OrderUpdateOne {
	ouo.mutation.AddPrice(f)
	return ouo
}

// SetAddress sets the "address" field.
func (ouo *OrderUpdateOne) SetAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetAddress(s)
	return ouo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetAddress(*s)
	}
	return ouo
}

// SetLongitude sets the "longitude" field.
func (ouo *OrderUpdateOne) SetLongitude(s string) *OrderUpdateOne {
	ouo.mutation.SetLongitude(s)
	return ouo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLongitude(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetLongitude(*s)
	}
	return ouo
}

// SetLatitude sets the "latitude" field.
func (ouo *OrderUpdateOne) SetLatitude(s string) *OrderUpdateOne {
	ouo.mutation.SetLatitude(s)
	return ouo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableLatitude(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetLatitude(*s)
	}
	return ouo
}

// SetCategoryID sets the "category_id" field.
func (ouo *OrderUpdateOne) SetCategoryID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCategoryID(u)
	return ouo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCategoryID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetCategoryID(*u)
	}
	return ouo
}

// SetClientID sets the "client_id" field.
func (ouo *OrderUpdateOne) SetClientID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetClientID(u)
	return ouo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableClientID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetClientID(*u)
	}
	return ouo
}

// SetMasterID sets the "master_id" field.
func (ouo *OrderUpdateOne) SetMasterID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetMasterID(u)
	return ouo
}

// SetNillableMasterID sets the "master_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMasterID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetMasterID(*u)
	}
	return ouo
}

// ClearMasterID clears the value of the "master_id" field.
func (ouo *OrderUpdateOne) ClearMasterID() *OrderUpdateOne {
	ouo.mutation.ClearMasterID()
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Title(); ok {
		if err := order.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Order.title": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Description(); ok {
		if err := order.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Order.description": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Address(); ok {
		if err := order.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Order.address": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Longitude(); ok {
		if err := order.LongitudeValidator(v); err != nil {
			return &ValidationError{Name: "longitude", err: fmt.Errorf(`ent: validator failed for field "Order.longitude": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Latitude(); ok {
		if err := order.LatitudeValidator(v); err != nil {
			return &ValidationError{Name: "latitude", err: fmt.Errorf(`ent: validator failed for field "Order.latitude": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Title(); ok {
		_spec.SetField(order.FieldTitle, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(order.FieldDescription, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ouo.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := ouo.mutation.Address(); ok {
		_spec.SetField(order.FieldAddress, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Longitude(); ok {
		_spec.SetField(order.FieldLongitude, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Latitude(); ok {
		_spec.SetField(order.FieldLatitude, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CategoryID(); ok {
		_spec.SetField(order.FieldCategoryID, field.TypeUUID, value)
	}
	if value, ok := ouo.mutation.ClientID(); ok {
		_spec.SetField(order.FieldClientID, field.TypeUUID, value)
	}
	if value, ok := ouo.mutation.MasterID(); ok {
		_spec.SetField(order.FieldMasterID, field.TypeUUID, value)
	}
	if ouo.mutation.MasterIDCleared() {
		_spec.ClearField(order.FieldMasterID, field.TypeUUID)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
